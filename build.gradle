
buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "gradle.plugin.com.github.johnrengelman:shadow:7.1.2"
    }
}

apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: "com.github.johnrengelman.shadow"

group = 'com.elevenware.conformance.harness'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {

    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'com.elevenware.oidc4j:lib-oidc4j:0.0.1-SNAPSHOT'
    implementation 'com.elevenware.oidc4j:commons:0.0.1-SNAPSHOT'
    implementation 'org.slf4j:slf4j-simple:2.0.10'

    implementation 'io.javalin:javalin:6.1.3'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.1'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.41.2'

    testImplementation 'uk.co.datumedge:hamcrest-json:0.2'

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'opf-conformance-harness'
                description = 'A simple OIDC provider for logging into conformance suites'
                url = 'https://github.com/georgecodes/opf-conformance-harness'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                groupId = "com.elevenware.conformance.harness"
                version = version
                developers {
                    developer {
                        id = 'georgecodes'
                        name = 'George McIntosh'
                        email = 'george@elevenware.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/georgecodes/opf-conformance-harness.git'
                    developerConnection = 'scm:git:https://github.com/georgecodes/opf-conformance-harness.git'
                    url = 'https://github.com/georgecodes/opf-conformance-harness'
                }
            }
        }
    }
    repositories {
        maven {

            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = 'nexus'
            credentials(PasswordCredentials)
        }
    }

}

jar {
    manifest.attributes provider: 'gradle'
}

signing {
    useGpgCmd()
    sign publishing.publications.maven
}

task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.elevenware.oidc.certification.harness.ConformanceHarnessApp'
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    archiveFileName = "harness-all.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

